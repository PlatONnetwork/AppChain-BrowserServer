<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.platon.browser.dao.custommapper.CustomToken1155InventoryMapper">
    <insert id="batchInsertOrUpdateSelective" parameterType="map">
        replace into token_1155_inventory (
        <foreach collection="selective" item="column" separator=",">
            ${column.escapedColumnName}
        </foreach>
        )
        values
        <foreach collection="list" item="item" separator=",">
            (
            <foreach collection="selective" item="column" separator=",">
                <if test="'token_address'.toString() == column.value">
                    #{item.tokenAddress,jdbcType=VARCHAR}
                </if>
                <if test="'token_id'.toString() == column.value">
                    #{item.tokenId,jdbcType=VARCHAR}
                </if>
                <if test="'name'.toString() == column.value">
                    #{item.name,jdbcType=VARCHAR}
                </if>
                <if test="'description'.toString() == column.value">
                    #{item.description,jdbcType=VARCHAR}
                </if>
                <if test="'image'.toString() == column.value">
                    #{item.image,jdbcType=VARCHAR}
                </if>
                <if test="'create_time'.toString() == column.value">
                    #{item.createTime,jdbcType=TIMESTAMP}
                </if>
                <if test="'update_time'.toString() == column.value">
                    #{item.updateTime,jdbcType=TIMESTAMP}
                </if>
                <if test="'token_tx_qty'.toString() == column.value">
                    #{item.tokenTxQty,jdbcType=INTEGER}
                </if>
                <if test="'small_image'.toString() == column.value">
                    #{item.smallImage}
                </if>
                <if test="'medium_image'.toString() == column.value">
                    #{item.mediumImage}
                </if>
                <if test="'id'.toString() == column.value">
                    #{item.id}
                </if>
                <if test="'token_url'.toString() == column.value">
                    #{item.tokenUrl}
                </if>
                <if test="'retry_num'.toString() == column.value">
                    #{item.retryNum}
                </if>
            </foreach>
            )
        </foreach>
    </insert>

    <delete id="burnAndDelTokenInventory">
        <foreach collection="list" item="item" separator=";">
            delete from token_1155_inventory
            where token_address = #{item.tokenAddress} and token_id = #{item.tokenId}
        </foreach>
    </delete>

    <select id="selectTokenInventory" resultType="com.platon.browser.bean.CustomToken1155Inventory">
        SELECT
            ti.token_address AS tokenAddress,
            ti.token_id AS tokenId,
#             ti.OWNER AS OWNER,
#             ti.balance AS balance,
            ti.NAME AS NAME,
            ti.description,
            ti.image,
            ti.create_time AS createTime,
            ti.update_time AS updateTime,
            ti.token_tx_qty AS tokenTxQty,
            t.NAME AS tokenName,
            t.symbol AS symbol
        FROM
            token_1155_inventory ti
                LEFT JOIN token t ON ti.token_address = t.address
        where ti.token_address = #{tokenAddress,jdbcType=VARCHAR}
          and ti.token_id = #{tokenId,jdbcType=VARCHAR}
    </select>

<!--    <select id="findErc1155ContractDestroyBalance" parameterType="string" resultType="com.platon.browser.bean.Erc1155ContractDestroyBalanceVO">-->
<!--        select-->
<!--            t2.token_address as tokenAddress ,-->
<!--            t2.owner ,-->
<!--            count(1) as num-->
<!--        from-->
<!--            (-->
<!--                select-->
<!--                    t1.token_address ,-->
<!--                    t1.token_id ,-->
<!--                    t1.owner-->
<!--                from-->
<!--                    token_1155_inventory t1-->
<!--                where-->
<!--                    t1.token_address = #{tokenAddress}-->
<!--            ) t2-->
<!--        group by-->
<!--            t2.owner-->
<!--    </select>-->


    <select id="findErc1155ContractDestroyBalance" parameterType="string" resultType="com.platon.browser.bean.Erc1155ContractDestroyBalanceVO">
        select
            t2.token_address as tokenAddress ,
            count(1) as num
        from
            (
                select
                    t1.token_address ,
                    t1.token_id
                from
                    token_1155_inventory t1
                where
                    t1.token_address = #{tokenAddress}
            ) t2
        group by
            t2.token_address
    </select>

    <select id="findDestroyContracts" resultType="com.platon.browser.dao.entity.Token1155InventoryWithBLOBs">
        SELECT
            t1.id as id,
            t1.token_address as tokenAddress,
            t1.token_id as tokenId,
#             t1.`owner` as owner,
            t1.`name` as name,
            t1.image as image,
            t1.create_time as createTime,
            t1.update_time as updateTime,
            t1.token_tx_qty as tokenTxQty,
#             t1.token_owner_tx_qty as tokenOwnerTxQty,
            t1.small_image as smallImage,
            t1.medium_image as mediumImage,
            t1.retry_num as retryNum,
            t1.description as description,
            t1.token_url as tokenUrl
        FROM
            token_inventory t1
                LEFT JOIN address t2 ON t1.token_address = t2.address
        WHERE
            t2.contract_destroy_hash IS NOT NULL
          AND LENGTH( trim( t2.contract_destroy_hash ) ) > 0
          AND t1.id > #{minId}
        <![CDATA[ AND t1.id <= #{maxId} ]]>
        <![CDATA[ AND t1.retry_num < #{retryNum} ]]>
        ORDER BY
            t1.id
    </select>


</mapper>