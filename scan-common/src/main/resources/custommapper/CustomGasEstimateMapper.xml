<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.platon.browser.dao.custommapper.CustomGasEstimateMapper">

  <resultMap id="BaseResultMap_with_hashCode" type="com.platon.browser.dao.entity.GasEstimate">
    <id column="addr" jdbcType="VARCHAR" property="addr" />
    <id column="node_id" jdbcType="VARCHAR" property="nodeId" />
    <id column="node_id_hash_code" jdbcType="INTEGER" property="nodeIdHashCode" />
    <id column="sbn" jdbcType="BIGINT" property="sbn" />
    <result column="epoch" jdbcType="BIGINT" property="epoch" />
  </resultMap>

  <select id="listHashCodeEmpty" resultMap="BaseResultMap_with_hashCode">
    select addr, node_id, node_id_hash_code, sbn, epoch
    from gas_estimate where node_id_hash_code is null
  </select>

  <update  id="updateHashCodeEmpty" >
    <foreach collection="list" item="item" separator=";">
      update gas_estimate set node_id_hash_code = #{item.nodeIdHashCode,jdbcType=INTEGER} where `node_id`= #{item.nodeId,jdbcType=VARCHAR}
    </foreach>
  </update>

  <insert id="batchInsertOrResetEpoch" >
    <foreach collection="list" item="item" separator=";">
      insert into gas_estimate (addr, node_id, node_id_hash_code, sbn, epoch)
      values (#{item.addr,jdbcType=VARCHAR}, #{item.nodeId,jdbcType=VARCHAR}, #{item.nodeIdHashCode,jdbcType=INTEGER}, #{item.sbn,jdbcType=BIGINT}, 0)
      ON DUPLICATE KEY UPDATE epoch = 0
    </foreach>

  </insert>
  <update id="resetEpoch">
      <foreach collection="list" item="item" separator=";">
        update gas_estimate
        set epoch = 0
        where `node_id_hash_code`=  #{item.nodeIdHashCode,jdbcType=INTEGER} and `sbn` =  #{item.sbn,jdbcType=BIGINT} and addr = #{item.addr,jdbcType=VARCHAR}
      </foreach>
  </update>
  <update id="increaseEpoch">
    <foreach collection="list" item="item" separator=";">
      update gas_estimate
      set epoch = epoch + 1
      where `node_id_hash_code`=  #{item.nodeIdHashCode,jdbcType=INTEGER} and `sbn` =  #{item.sbn,jdbcType=BIGINT}
    </foreach>
  </update>
</mapper>
